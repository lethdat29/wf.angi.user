# {
#   "event_type": "trigger_build",
#   "client_payload": {
#     "name": "angi.user",
#     "gitUrl": "",
#     "branch": "main",
#     "imageName": "angi/angi.user",
#     "dockerfilePath": "Dockerfile",
#     "kubeConfigYamlPath": "k8s.yaml"
#   }
# }


name: Build and Deploy Multi-Group Workflow

on:
  repository_dispatch:
    types: [gitea-push, trigger_build]
  
concurrency:
  group: ${{ github.event.client_payload.imageName }}   # Lấy group từ payload
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      NAME: ${{ github.event.client_payload.name }}
      GIT_URL: ${{ github.event.client_payload.gitUrl }}
      BRANCH: ${{ github.event.client_payload.branch }}
      IMAGE_NAME: ${{ github.event.client_payload.imageName }}
      DOCKER_FILE_PATH: ${{ github.event.client_payload.dockerfilePath }}
      KUBECONFIG_YAML_PATH: ${{ github.event.client_payload.kubeConfigYamlPath }}
    steps:
      - name: Notify Telegram on workflow start
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELE_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🚀 Workflow ${{ github.workflow }} started for Group ${{ github.event.client_payload.group }}."
  build:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      GIT_URL: ${{ needs.prepare.outputs.GIT_URL }}
      BRANCH: ${{ needs.prepare.outputs.BRANCH }}
      IMAGE_NAME: ${{ needs.prepare.outputs.IMAGE_NAME }}
      DOCKER_FILE_PATH: ${{ needs.prepare.outputs.DOCKER_FILE_PATH }}
      GITEA_USERNAME: ${{ secrets.GITEA_USERNAME }}
      GITEA_TOKEN: ${{ secrets.GITEA_TOKEN }}
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TELE_TOKEN: ${{ secrets.TELE_TOKEN }}
      NAME: ${{ needs.prepare.outputs.NAME }}
    outputs:
      IMG_TAG: ${{ steps.set_img_tag.outputs.IMG_TAG }}
    steps:
      - name: Clone another repo
        run: |
          echo "Cloning repository..."

          git clone --depth=1 --branch ${{ env.BRANCH }} ${{ env.GIT_URL }} app
          cd app
          ls -la
          COMMIT_SHA=$(git rev-parse --short HEAD)
          echo "Commit SHA: $COMMIT_SHA"
          echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          cd app
          docker login quay.io -u ${{ secrets.QUAY_USERNAME }} -p ${{ secrets.QUAY_TOKEN }}
          docker build -t quay.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}.${{ github.run_number }} .
      - name: Push Docker image
        if: success()
        run: |
          docker push quay.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}.${{ github.run_number }}
          echo "Docker image pushed successfully."
      - name: Set image tag for deployment
        id: set_img_tag
        run: echo "IMG_TAG=${{ env.COMMIT_SHA }}.${{ github.run_number }}" >> $GITHUB_OUTPUT
      - name: Notify Telegram on success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELE_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="✅ Build job ${{ env.NAME }} completed successfully! Tag: ${{ steps.set_img_tag.outputs.IMG_TAG }}"

      - name: Notify Telegram on failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELE_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="❌ Build job ${{ env.NAME }}/${{ github.run_number }} failed!"
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - build
    env:
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      IMAGE_TAG: ${{ needs.build.outputs.IMG_TAG }}
      KUBECONFIG_YAML_PATH: ${{ needs.prepare.outputs.KUBECONFIG_YAML_PATH }}
    steps:
      - name: debug
        run: |
          echo "IMAGE_TAG: $IMAGE_TAG"
      # echo "KUBE_CONFIG_DATA: $KUBE_CONFIG_DATA"
      # - name: Set up kubeconfig
      #   run: |
      #     mkdir -p $HOME/.kube
      #     echo "$KUBE_CONFIG_DATA" | base64 --decode > $HOME/.kube/config
      #     cat $HOME/.kube/config

      # - name: Deploy to K3s
      #   run: |
      #     echo "Deploying Docker image to K3s..."
      #     kubectl set image deployment/angi-user angi-user=quay.io/angi/angi.user:${{ env.COMMIT_SHA }}.${{ github.run_number }} --kubeconfig ${{ secrets.K3S_KUBECONFIG }}