# {
#   "event_type": "trigger_build",
#   "client_payload": {
#     "job_id": "job_id",
#     "name": "angi.user",
#     "gitUrl": "",
#     "branch": "main",
#     "imageName": "angi/angi.user",
#     "dockerfilePath": "Dockerfile",
#     "kubeConfigYamlPath": "k8s.yaml"
#   }
# }


name: Build and Deploy Multi-Group Workflow

on:
  repository_dispatch:
    types: [gitea-push, trigger_build]
  
concurrency:
  group: ${{ github.event.client_payload.imageName }}   # Lấy group từ payload
  cancel-in-progress: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      NAME: ${{ steps.set_env_vars.outputs.NAME }}
      GIT_URL: ${{ steps.set_env_vars.outputs.GIT_URL }}
      BRANCH: ${{ steps.set_env_vars.outputs.BRANCH }}
      IMAGE_NAME: ${{ steps.set_env_vars.outputs.IMAGE_NAME }}
      DOCKER_FILE_PATH: ${{ steps.set_env_vars.outputs.DOCKER_FILE_PATH }}
      KUBECONFIG_YAML_PATH: ${{ steps.set_env_vars.outputs.KUBECONFIG_YAML_PATH }}
      JOB_ID: ${{ steps.set_env_vars.outputs.JOB_ID }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set execute permission
        run: chmod +x scripts/stream-log.sh
      - name: Notify Telegram on workflow start
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELE_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="🚀 Workflow ${{ github.workflow }} started for ${{ github.event.client_payload.imageName }}."
      - name: Set up environment variables
        id: set_env_vars
        run: |
          echo "NAME=${{ github.event.client_payload.name }}" >> $GITHUB_OUTPUT
          echo "GIT_URL=$(echo -n '${{ github.event.client_payload.gitUrl }}' | base64 -w0)" >> $GITHUB_OUTPUT
          echo "BRANCH=${{ github.event.client_payload.branch }}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${{ github.event.client_payload.imageName }}" >> $GITHUB_OUTPUT
          echo "DOCKER_FILE_PATH=${{ github.event.client_payload.dockerfilePath }}" >> $GITHUB_OUTPUT
          echo "KUBECONFIG_YAML_PATH=${{ github.event.client_payload.kubeConfigYamlPath }}" >> $GITHUB_OUTPUT
          echo "JOB_ID=${{ github.event.client_payload.job_id || github.run_id }}" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-latest
    needs: prepare
    env:
      GIT_URL: $(echo "${{ needs.prepare.outputs.GIT_URL }}" | base64 --decode)
      BRANCH: ${{ needs.prepare.outputs.BRANCH }}
      IMAGE_NAME: ${{ needs.prepare.outputs.IMAGE_NAME }}
      DOCKER_FILE_PATH: ${{ needs.prepare.outputs.DOCKER_FILE_PATH }}
      QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
      QUAY_TOKEN: ${{ secrets.QUAY_TOKEN }}
      TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
      TELE_TOKEN: ${{ secrets.TELE_TOKEN }}
      NAME: ${{ needs.prepare.outputs.NAME }}
      JOB_ID: ${{ needs.prepare.outputs.JOB_ID }}
    outputs:
      IMG_TAG: ${{ steps.set_img_tag.outputs.IMG_TAG }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set execute permission
        run: chmod +x scripts/stream-log.sh
      - name: Clone another repo
        run: |
          ./scripts/stream-log.sh echo "Cloning repository... ${{ env.GIT_URL }} on branch ${{ env.BRANCH }}"

          ./scripts/stream-log.sh git clone --depth=1 --branch ${{ env.BRANCH }} ${{ env.GIT_URL }} app
          ./scripts/stream-log.sh cd app
          ./scripts/stream-log.sh ls -la
          ./scripts/stream-log.sh COMMIT_SHA=$(git rev-parse --short HEAD)
          ./scripts/stream-log.sh echo "Commit SHA: $COMMIT_SHA"
          ./scripts/stream-log.sh echo "COMMIT_SHA=$COMMIT_SHA" >> $GITHUB_ENV
      - name: Build Docker image
        run: |
          ./scripts/stream-log.sh cd app
          ./scripts/stream-log.sh docker login quay.io -u ${{ secrets.QUAY_USERNAME }} -p ${{ secrets.QUAY_TOKEN }}
          ./scripts/stream-log.sh docker build -t quay.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}.${{ github.run_number }} .
      - name: Push Docker image
        if: success()
        run: |
          ./scripts/stream-log.sh docker push quay.io/${{ env.IMAGE_NAME }}:${{ env.COMMIT_SHA }}.${{ github.run_number }}
          ./scripts/stream-log.sh echo "Docker image pushed successfully."
      - name: Set image tag for deployment
        id: set_img_tag
        run: ./scripts/stream-log.sh echo "IMG_TAG=${{ env.COMMIT_SHA }}.${{ github.run_number }}" >> $GITHUB_OUTPUT
      - name: Notify Telegram on success
        if: success()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELE_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="✅ Build job ${{ env.NAME }} completed successfully! Tag: ${{ steps.set_img_tag.outputs.IMG_TAG }}"

      - name: Notify Telegram on failure
        if: failure()
        run: |
          curl -s -X POST https://api.telegram.org/bot${{ secrets.TELE_TOKEN }}/sendMessage \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="❌ Build job ${{ env.NAME }}/${{ github.run_number }} failed! git url ${{ env.GIT_URL }} on branch ${{ env.BRANCH }}"
  deploy:
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - build
    env:
      KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      IMAGE_TAG: ${{ needs.build.outputs.IMG_TAG }}
      KUBECONFIG_YAML_PATH: ${{ needs.prepare.outputs.KUBECONFIG_YAML_PATH }}
      JOB_ID: ${{ needs.prepare.outputs.JOB_ID }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Set execute permission
        run: chmod +x scripts/stream-log.sh
      - name: debug
        run: |
          ./scripts/stream-log.sh echo "IMAGE_TAG: $IMAGE_TAG"
      # echo "KUBE_CONFIG_DATA: $KUBE_CONFIG_DATA"
      # - name: Set up kubeconfig
      #   run: |
      #     mkdir -p $HOME/.kube
      #     echo "$KUBE_CONFIG_DATA" | base64 --decode > $HOME/.kube/config
      #     cat $HOME/.kube/config

      # - name: Deploy to K3s
      #   run: |
      #     echo "Deploying Docker image to K3s..."
      #     kubectl set image deployment/angi-user angi-user=quay.io/angi/angi.user:${{ env.COMMIT_SHA }}.${{ github.run_number }} --kubeconfig ${{ secrets.K3S_KUBECONFIG }}
      # - name: Send to server
      #   run: |
      #     curl -s -X POST http://your-server.com/upload \
      #       -H "Content-Type: multipart/form-data" \
      #       -F "file=@full-workflow.log"